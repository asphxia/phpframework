<?php

namespace Core\Render;

require_once dirname(__FILE__) . '/../../../core/render/Render.php';

/**
 * Test class for Render.
 * Generated by PHPUnit on 2012-05-28 at 06:32:01.
 */
class RenderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Render
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $config = array(
            'config' => array(
                'layout_dir'=>'eee'
                ),
            'pages'=>array(
                'home' => 'Home page',
                'index' => 'Index page'
            )
            );
        $this->object = new Render($config);
        $this->assertTrue(
                $this->object->getExtension() == '.phtml'
                );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testSetAvailablePages() {
        $test = array('home' => 'Homepage', 'rape' => 'cunts');
        $this->assertEquals($test,
                $this->object->setAvailablePages($test)
                );
        
        $this->assertEquals($test,
                $this->object->getAvailablePages()
                );
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testGetAvailablePages() {
        $test = array('homeasdasd' => 'Homsdasdepage', 'rasdasdpe' => 'asdasdsadcunts');
        $this->assertEquals($test,
                $this->object->setAvailablePages($test)
                );
        $this->assertEquals($test,
                $this->object->getAvailablePages()
                );
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testSetConfig() {
        $test = array('extension' => '.hml');
        $this->assertEquals($test, $this->object->setConfig($test));
        $this->assertTrue($test['extension'] == $this->object->getExtension());

        $test = array('extension' => '.cunt');
        $this->assertEquals($test, $this->object->setConfig($test));
        $this->assertTrue($test['extension'] == $this->object->getExtension());

        $test = array('extension' => '.cuntdestroyer');
        $this->assertFalse($test['extension'] == $this->object->getExtension());    
        
        $test = array('extension' => '../exe');
        $this->assertFalse($test['extension'] == $this->object->getExtension());    

        $test = array('extension' => '..d');
        $this->assertFalse($test['extension'] == $this->object->getExtension());    

        $test = array('extension' => '.xml');
        $this->assertEquals($test, $this->object->setConfig($test));
        $this->assertTrue($test['extension'] == $this->object->getExtension());    
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testGetConfig() {
        $test = array('extension' => '.ht');
        $this->assertEquals($test, $this->object->setConfig($test));
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSetPages().
     */
    public function testSetPages() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetPages().
     */
    public function testGetPages() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testSetActivePage() {
        $test = array('page' => 'Index',
                    'controller' => 'Index',
            );
        $views = dirname(__FILE__) . '/../../../application/views';
        $this->object->setPages($views);
        $this->assertEquals($views, $this->object->getPages());
        $this->assertEquals($test['page'], $this->object->setActivePage($test['page'], $test['controller']));
        $this->assertEquals($test['controller'], $this->object->getNamespace());
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetActivePage().
     */
    public function testGetActivePage() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testSetExtension().
     */
    public function testSetExtension() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testGetExtension().
     */
    public function testGetExtension() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers {className}::{origMethodName}
     * @todo Implement testOutput().
     */
    public function testOutput() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}

?>
